<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">aesopapistage.flqa.net</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Ran_String" elementType="Argument">
            <stringProp name="Argument.name">Ran_String</stringProp>
            <stringProp name="Argument.value">${__RandomString(15,YROFCBWOCHWQCNDSCZMPWURVJSA,Random_String)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Phone" elementType="Argument">
            <stringProp name="Argument.name">Phone</stringProp>
            <stringProp name="Argument.value">${__Random(1111111111,9999999999,Phone)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Pin" elementType="Argument">
            <stringProp name="Argument.name">Pin</stringProp>
            <stringProp name="Argument.value">${__Random(11111,99999,Pin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="workerType" elementType="Argument">
            <stringProp name="Argument.name">workerType</stringProp>
            <stringProp name="Argument.value">286983</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">report_139975_286982, report_139976_286983</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">counter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
          <stringProp name="TestPlan.comments">emp-2008, subs-1459</stringProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_Login_To_Get_Token" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;loginId&quot;: &quot;report_139976&quot;,&#xd;
&quot;pin&quot;: &quot;1212&quot;,&#xd;
&quot;forceRefreshSession&quot;: true&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/v1.0/Login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Postman-Token</stringProp>
                <stringProp name="Header.value">3d9e10df-0699-4e30-b296-208b9d486bdb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;},</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-538673239">success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_Create_Employee" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: 0,&#xd;
  &quot;firstName&quot;: &quot;Perf_First_Auto_${counter}&quot;,&#xd;
  &quot;middleName&quot;: &quot;string&quot;,&#xd;
  &quot;lastName&quot;: &quot;Perf_Last_Auto_${counter}&quot;,&#xd;
  &quot;identity&quot;: &quot;string&quot;,&#xd;
  &quot;phone&quot;: &quot;${__Random(1111111111,9999999999,Phone)}&quot;,&#xd;
  &quot;isVacancy&quot;: true,&#xd;
  &quot;isDeleted&quot;: true,&#xd;
  &quot;isVacancyPrivate&quot;: true,&#xd;
  &quot;title&quot;: &quot;string&quot;,&#xd;
  &quot;workerType&quot;: {&#xd;
    &quot;id&quot;: 287414,&#xd;
    &quot;title&quot;: &quot;string&quot;,&#xd;
    &quot;DeductBreakFromAbsenceDuration&quot;: true,&#xd;
    &quot;BalanceTrackingType&quot;: 0&#xd;
  },&#xd;
  &quot;isActive&quot;: true,&#xd;
  &quot;loginId&quot;: &quot;string&quot;,&#xd;
  &quot;DeductBreakFromAbsenceDuration&quot;: true,&#xd;
  &quot;externalId&quot;: &quot;string&quot;,&#xd;
  &quot;absenceFeedback&quot;: {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;numberOfRatings&quot;: 0,&#xd;
    &quot;totalScore&quot;: 0,&#xd;
    &quot;avgScore&quot;: 0&#xd;
  },&#xd;
  &quot;needSub&quot;: 0,&#xd;
  &quot;pin&quot;: &quot;${__Random(11111,99999,Pin)}&quot;,&#xd;
  &quot;identifier&quot;: &quot;${__RandomString(15,YROFCBWOCHWQCNDSCZMPWURVJSA,Random_String)}&quot;,&#xd;
  &quot;isItinerant&quot;: true,&#xd;
  &quot;absenceFeedbackTotal&quot;: {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;numberOfRatings&quot;: 0,&#xd;
    &quot;totalScore&quot;: 0,&#xd;
    &quot;avgScore&quot;: 0&#xd;
  },&#xd;
  &quot;accountingCode&quot;: {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;orgId&quot;: 0,&#xd;
    &quot;externalId&quot;: &quot;string&quot;,&#xd;
    &quot;name&quot;: &quot;string&quot;,&#xd;
    &quot;isPublic&quot;: true,&#xd;
    &quot;isAllocationGroup&quot;: true,&#xd;
    &quot;isFreeForm&quot;: true&#xd;
  },&#xd;
  &quot;budgetCode&quot;: {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;description&quot;: &quot;string&quot;&#xd;
  },&#xd;
  &quot;institution&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: 365196,&#xd;
      &quot;name&quot;: &quot;string&quot;,&#xd;
      &quot;parent&quot;: 0,&#xd;
      &quot;children&quot;: [&#xd;
        0&#xd;
      ],&#xd;
      &quot;isAvailable&quot;: true,&#xd;
      &quot;externalNumber&quot;: &quot;string&quot;,&#xd;
      &quot;address1&quot;: &quot;string&quot;,&#xd;
      &quot;address2&quot;: &quot;string&quot;,&#xd;
      &quot;address3&quot;: &quot;string&quot;,&#xd;
      &quot;address4&quot;: &quot;string&quot;,&#xd;
      &quot;city&quot;: &quot;string&quot;,&#xd;
      &quot;phone&quot;: &quot;${__Random(1111111111,9999999999,Phone)}&quot;,&#xd;
      &quot;state&quot;: &quot;string&quot;,&#xd;
      &quot;zip&quot;: &quot;string&quot;,&#xd;
      &quot;fax&quot;: &quot;string&quot;,&#xd;
      &quot;active&quot;: true,&#xd;
      &quot;timeZone&quot;: 0,&#xd;
      &quot;timeZoneDescription&quot;: &quot;string&quot;,&#xd;
      &quot;startTime&quot;: &quot;string&quot;,&#xd;
      &quot;endTime&quot;: &quot;string&quot;,&#xd;
      &quot;halfDayAMEndTime&quot;: &quot;string&quot;,&#xd;
      &quot;halfDayPMStartTime&quot;: &quot;string&quot;,&#xd;
      &quot;subRelativeStartTimeMinutes&quot;: 0,&#xd;
      &quot;subRelativeEndTimeMins&quot;: 0,&#xd;
      &quot;subStartTime&quot;: &quot;string&quot;,&#xd;
      &quot;subEndTime&quot;: &quot;string&quot;,&#xd;
      &quot;subHalfDayAMEndTime&quot;: &quot;string&quot;,&#xd;
      &quot;subHalfDayPMStartTime&quot;: &quot;string&quot;,&#xd;
      &quot;requireCommentsWhenExcludingSubs&quot;: true,&#xd;
      &quot;HoursPerDay&quot;: 0,&#xd;
      &quot;MaxAbsenceDuration&quot;: 0,&#xd;
      &quot;MinAbsenceDuration&quot;: 0&#xd;
    }&#xd;
  ],&#xd;
  &quot;needFulfilment&quot;: 0,&#xd;
  &quot;EntitlementBalances&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: 0,&#xd;
      &quot;BalanceAsOf&quot;: &quot;string&quot;,&#xd;
      &quot;BaseBalance&quot;: 0,&#xd;
      &quot;CurrentBalance&quot;: 0,&#xd;
      &quot;EntitlementType&quot;: {&#xd;
        &quot;id&quot;: 0,&#xd;
        &quot;name&quot;: &quot;string&quot;,&#xd;
        &quot;description&quot;: &quot;string&quot;,&#xd;
        &quot;notesToAdminRequired&quot;: true,&#xd;
        &quot;isVacancyType&quot;: true,&#xd;
        &quot;isBucket&quot;: true,&#xd;
        &quot;parent&quot;: {},&#xd;
        &quot;needsApproval&quot;: true,&#xd;
        &quot;externalId&quot;: &quot;string&quot;,&#xd;
        &quot;externalId2&quot;: &quot;string&quot;,&#xd;
        &quot;institutionId&quot;: 0,&#xd;
        &quot;children&quot;: [&#xd;
          {}&#xd;
        ],&#xd;
        &quot;menuNumber&quot;: 0,&#xd;
        &quot;isPublic&quot;: true,&#xd;
        &quot;holdUntilApproved&quot;: true,&#xd;
        &quot;enforceEntitlementBalances&quot;: true,&#xd;
        &quot;workerTypes&quot;: [&#xd;
          {&#xd;
            &quot;id&quot;: 0,&#xd;
            &quot;title&quot;: &quot;string&quot;,&#xd;
            &quot;DeductBreakFromAbsenceDuration&quot;: true,&#xd;
            &quot;BalanceTrackingType&quot;: 0&#xd;
          }&#xd;
        ],&#xd;
        &quot;useMaxUsagePerYearMinutes&quot;: true,&#xd;
        &quot;maxUsagePerYearMinutes&quot;: 0,&#xd;
        &quot;useMinUsageMinutes&quot;: true,&#xd;
        &quot;minUsageMinutes&quot;: 0,&#xd;
        &quot;useMinBalanceMinutes&quot;: true,&#xd;
        &quot;minBalanceMinutes&quot;: 0,&#xd;
        &quot;dataAnalysisCategory&quot;: {&#xd;
          &quot;id&quot;: 0,&#xd;
          &quot;description&quot;: &quot;string&quot;&#xd;
        },&#xd;
        &quot;languageTexts&quot;: {},&#xd;
        &quot;lastUpdate&quot;: &quot;string&quot;&#xd;
      },&#xd;
      &quot;TenantId&quot;: 0,&#xd;
      &quot;WorkId&quot;: 0&#xd;
    }&#xd;
  ],&#xd;
  &quot;WorkHoursPerDay&quot;: 0&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/v1.0/Automation/Org/140260/SetupEmployee</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="AesopToken" elementType="Header">
                <stringProp name="Header.name">AesopTokenLegacy</stringProp>
                <stringProp name="Header.value">6BD6C74C100E482597457C8DD1CD8CE5 </stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Worker_Id</stringProp>
            <stringProp name="RegexExtractor.regex">{&quot;data&quot;:(.+?),</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_Final" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleListener;
import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.testelement.OnErrorTestElement;
import org.apache.jmeter.protocol.http.sampler;


String Workerid=&quot;${Worker_Id}&quot;;


FileWriter fstream = new FileWriter(&quot;D:/apache-jmeter-5.3/apache-jmeter-5.3/bin/Result/Employee_139976.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);


out.write(Workerid);
out.write(System.getProperty(&quot;line.separator&quot;));


out.close();
fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_Error" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_Success" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report_Error" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report_Success" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report_All" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>

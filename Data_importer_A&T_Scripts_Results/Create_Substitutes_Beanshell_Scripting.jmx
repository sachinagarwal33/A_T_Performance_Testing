<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Users" elementType="Argument">
            <stringProp name="Argument.name">Users</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Loopcount" elementType="Argument">
            <stringProp name="Argument.name">Loopcount</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">aesopapistage.flqa.net</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Ran_String" elementType="Argument">
            <stringProp name="Argument.name">Ran_String</stringProp>
            <stringProp name="Argument.value">${__RandomString(15,YROFCBWOCHWQCNDSCZMPWURVJSA,Random_String)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Phone" elementType="Argument">
            <stringProp name="Argument.name">Phone</stringProp>
            <stringProp name="Argument.value">${__Random(1111111111,9999999999,Phone)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Pin" elementType="Argument">
            <stringProp name="Argument.name">Pin</stringProp>
            <stringProp name="Argument.value">${__Random(11111,99999,Pin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">200</stringProp>
        <stringProp name="ThreadGroup.ramp_time">200</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">itr_no</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter1" enabled="true">
          <stringProp name="CounterConfig.start">61000</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">counter1</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
          <stringProp name="TestPlan.comments">emp-2008, subs-1459</stringProp>
        </CounterConfig>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC01_Login_To_Get_Token" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;loginId&quot;: &quot;report_140020&quot;,&#xd;
&quot;pin&quot;: &quot;1212&quot;,&#xd;
&quot;forceRefreshSession&quot;: true&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/v1.0/Login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Postman-Token</stringProp>
                <stringProp name="Header.value">3d9e10df-0699-4e30-b296-208b9d486bdb</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">access_token</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;},</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-538673239">success&quot;:true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleListener;
import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.testelement.OnErrorTestElement;
import org.apache.jmeter.protocol.http.sampler;

String First_Name=&quot;Aniket${counter1}&quot;;
String Last_Name=&quot;Agarwal${counter1}&quot;;
String Identifier=&quot;${__RandomString(15,YROFCBWOCHWQCNDSCZMPWURVJSA,Random_String)}&quot;;
String Phone=&quot;${__Random(1111111111,9999999999,Phone)}&quot;;
String Pin=&quot;${__Random(11111,99999,Pin)}&quot;;

FileWriter fstream = new FileWriter(&quot;D:/apache-jmeter-5.3/apache-jmeter-5.3/bin/Dummy/Test${__Random(10,999999,Random)}.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);


if(${itr_no}==1)
{
	out.write(&quot;Identifier,Employee ID,Pin,Last Name,First Name,Middle Name,Phone,Cross-District ID,Email,Active,Remove Substitute,Can Search On Web,Can Cancel,Permanent Sub School DbKey,Permanent Sub Rank,Pay Code External ID,Notes,Gender,Language Description,External ID,Send Email Notifications,Preferred School List Permission,Date of Join,Date of Birth,External ID 2,External ID 3,Street 1,Street 2,City,State,Zip,Skill Code,Remove Skill,Skill Expiration,Preferred School List Type,Preferred School DbKey,Remove Preferred School&quot;);
	out.write(System.getProperty(&quot;line.separator&quot;));
}

/*
out.write(id + &quot;,&quot; + stats + &quot;,&quot; + soa + &quot;,&quot; + msis + &quot;,&quot; + sta + &quot;,&quot; + responseTime_new + &quot;,&quot; + CU  + &quot;,&quot; + String.valueOf(&quot;${Date_Time}&quot; + &quot;,&quot; + Length));
out.write(System.getProperty(&quot;line.separator&quot;));
*/
out.close();
fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TC02_Create_Substitute" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: 0,&#xd;
  &quot;firstName&quot;: &quot;Sub${counter1}&quot;,&#xd;
  &quot;middleName&quot;: &quot;string&quot;,&#xd;
  &quot;lastName&quot;: &quot;Per${counter1}&quot;,&#xd;
  &quot;isActive&quot;: true,&#xd;
  &quot;absenceFeedback&quot;: {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;numberOfRatings&quot;: 0,&#xd;
    &quot;totalScore&quot;: 0,&#xd;
    &quot;avgScore&quot;: 0&#xd;
  },&#xd;
  &quot;email&quot;: &quot;string&quot;,&#xd;
  &quot;externalId&quot;: &quot;string&quot;,&#xd;
  &quot;identifier&quot;: &quot;${__RandomString(15,YROFCBWOCHWQCNDSCZMPWURVJSA,Random_String)}&quot;,&#xd;
  &quot;phone&quot;: &quot;${__Random(1111111111,9999999999,Phone)}&quot;,&#xd;
  &quot;isDeleted&quot;: true,&#xd;
  &quot;pin&quot;: &quot;${__Random(11111,99999,Pin)}&quot;,&#xd;
  &quot;orgId&quot;: &quot;string&quot;,&#xd;
  &quot;skills&quot;: [&#xd;
    {&#xd;
      &quot;skill&quot;: {&#xd;
        &quot;id&quot;: 0,&#xd;
        &quot;description&quot;: &quot;string&quot;,&#xd;
        &quot;code&quot;: &quot;string&quot;&#xd;
      },&#xd;
      &quot;id&quot;: 0,&#xd;
      &quot;expiresOn&quot;: &quot;string&quot;,&#xd;
      &quot;isExpired&quot;: true&#xd;
    }&#xd;
  ],&#xd;
  &quot;resume&quot;: {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;fileName&quot;: &quot;string&quot;,&#xd;
    &quot;notes&quot;: &quot;string&quot;,&#xd;
    &quot;mimeType&quot;: &quot;string&quot;,&#xd;
    &quot;mimeSubType&quot;: &quot;string&quot;,&#xd;
    &quot;downloadKey&quot;: &quot;string&quot;&#xd;
  },&#xd;
  &quot;photo&quot;: {&#xd;
    &quot;id&quot;: 0,&#xd;
    &quot;fileName&quot;: &quot;string&quot;,&#xd;
    &quot;notes&quot;: &quot;string&quot;,&#xd;
    &quot;mimeType&quot;: &quot;string&quot;,&#xd;
    &quot;mimeSubType&quot;: &quot;string&quot;,&#xd;
    &quot;downloadKey&quot;: &quot;string&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/v1.0/Automation/Org/140020/SetupSubstitute?instIdCsv=363869</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">363857</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="AesopToken" elementType="Header">
                <stringProp name="Header.name">AesopTokenLegacy</stringProp>
                <stringProp name="Header.value">6BD6C74C100E482597457C8DD1CD8CE5</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Substitute_Id</stringProp>
            <stringProp name="RegexExtractor.regex">{&quot;data&quot;:(.+?),&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_Final" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleListener;
import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.testelement.OnErrorTestElement;
import org.apache.jmeter.protocol.http.sampler;


String Sub_id=&quot;${Substitute_Id}&quot;;


FileWriter fstream = new FileWriter(&quot;D:/apache-jmeter-5.3/apache-jmeter-5.3/bin/Result/Substitute_139983.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);


out.write(&quot;${__RandomString(15,YROFCBWOCHWQCNDSCZMPWURVJSA,Random_String)},Sub_id&quot;);
out.write(System.getProperty(&quot;line.separator&quot;));


out.close();
fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor_Dummy" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleListener;
import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.testelement.OnErrorTestElement;
import org.apache.jmeter.protocol.http.sampler;


String First_Name=&quot;Aniket${counter1}&quot;;
String Last_Name=&quot;Agarwal${counter1}&quot;;
String Identifier=&quot;${__RandomString(15,YROFCBWOCHWQCNDSCZMPWURVJSA,Random_String)}&quot;;
String Phone=&quot;${__Random(1111111111,9999999999,Phone)}&quot;;
String Pin=&quot;${__Random(11111,99999,Pin)}&quot;;


FileWriter fstream = new FileWriter(&quot;D:/apache-jmeter-5.3/apache-jmeter-5.3/bin/Dummy/Test${__Random(10,999999,Random)}.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);

if(${itr_no}==1)
{
	out.write(&quot;Identifier,Employee ID,Pin,Last Name,First Name,Middle Name,Phone,Cross-District ID,Email,Active,Remove Substitute,Can Search On Web,Can Cancel,Permanent Sub School DbKey,Permanent Sub Rank,Pay Code External ID,Notes,Gender,Language Description,External ID,Send Email Notifications,Preferred School List Permission,Date of Join,Date of Birth,External ID 2,External ID 3,Street 1,Street 2,City,State,Zip,Skill Code,Remove Skill,Skill Expiration,Preferred School List Type,Preferred School DbKey,Remove Preferred School&quot;);
	out.write(System.getProperty(&quot;line.separator&quot;));

}
out.write(Identifier + &quot;,&quot; +  + &quot;,&quot; + Pin + &quot;,&quot; + Last_Name + &quot;,&quot; + First_Name + &quot;,&quot; +  + &quot;,&quot; + Phone);
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleListener;
import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.testelement.OnErrorTestElement;
import org.apache.jmeter.protocol.http.sampler;

String First_Name=&quot;Sub${counter1}&quot;;
String Last_Name=&quot;Per${counter1}&quot;;
String Identifier=&quot;${__RandomString(15,YROFCBWOCHWQCNDSCZMPWURVJSA,Random_String)}&quot;;
String Phone=&quot;${__Random(1111111111,9999999999,Phone)}&quot;;
String Pin=&quot;${__Random(11111,99999,Pin)}&quot;;



String status = &quot;&quot;;
String code = prev.getResponseCode();

vars.put(&quot;code&quot;,code);

if(code.contains(&quot;200&quot;))
{
    status = &quot;Pass&quot;;
    log.info(&quot;Passss&quot;);
}

else
{
    status = &quot;Fail&quot;;
}

if (status==&quot;Pass&quot;)
{

FileWriter fstream = new FileWriter(&quot;D:/apache-jmeter-5.3/apache-jmeter-5.3/bin/Substitute_Files/Test_${__threadNum}.csv&quot;, true);
BufferedWriter out = new BufferedWriter(fstream);

	
if(${itr_no}==1)
{
	out.write(&quot;Identifier,Employee ID,Pin,Last Name,First Name,Middle Name,Phone,Cross-District ID,Email,Active,Remove Substitute,Can Search On Web,Can Cancel,Permanent Sub School DbKey,Permanent Sub Rank,Pay Code External ID,Notes,Gender,Language Description,External ID,Send Email Notifications,Preferred School List Permission,Date of Join,Date of Birth,External ID 2,External ID 3,Street 1,Street 2,City,State,Zip,Skill Code,Remove Skill,Skill Expiration,Preferred School List Type,Preferred School DbKey,Remove Preferred School&quot;);
	out.write(System.getProperty(&quot;line.separator&quot;));
}
out.write(Identifier + &quot;,&quot; + &quot;,&quot; + Pin + &quot;,&quot; + Last_Name + &quot;,&quot; + First_Name + &quot;,&quot; + &quot;,&quot; + Phone);
out.write(System.getProperty(&quot;line.separator&quot;));

out.close();
fstream.close();
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.samplers.SampleListener;
import org.apache.jmeter.samplers.SampleResult;
import org.apache.jmeter.testelement.OnErrorTestElement;
import org.apache.jmeter.protocol.http.sampler;



    String status = &quot;&quot;;
String code = prev.getResponseCode();

vars.put(&quot;code&quot;,code);

if(code.contains(&quot;300&quot;))
{
    status = &quot;Pass&quot;;
    log.info(&quot;Passss&quot;);
}

else
{
    status = &quot;Fail&quot;;
}

vars.put(&quot;mystatus&quot;,status);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_Error" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree_Success" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report_Error" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report_Success" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report_All" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
